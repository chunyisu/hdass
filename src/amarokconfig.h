// This file is generated by kconfig_compiler from amarok.kcfg.
// All changes you do to this file will be lost.
#ifndef AMAROKCONFIG_H
#define AMAROKCONFIG_H

#include <kconfigskeleton.h>

class AmarokConfig : public KConfigSkeleton
{
  public:
    class EnumOsdAlignment
    {
      public:
      enum { Left, Middle, Center, Right, COUNT };
    };

    static AmarokConfig *self();
    ~AmarokConfig();

    /**
      Set Amarok Version
    */
    static
    void setVersion( const QString & v )
    {
      if (!self()->isImmutable( "Version" ))
        self()->mVersion = v;
    }

    /**
      Get Amarok Version
    */
    static
    QString version()
    {
      return self()->mVersion;
    }

    /**
      Set Position of player window
    */
    static
    void setPlayerPos( const QPoint & v )
    {
      if (!self()->isImmutable( "PlayerPos" ))
        self()->mPlayerPos = v;
    }

    /**
      Get Position of player window
    */
    static
    QPoint playerPos()
    {
      return self()->mPlayerPos;
    }

    /**
      Set Position of playlist window
    */
    static
    void setPlaylistWindowPos( const QPoint & v )
    {
      if (!self()->isImmutable( "PlaylistWindowPos" ))
        self()->mPlaylistWindowPos = v;
    }

    /**
      Get Position of playlist window
    */
    static
    QPoint playlistWindowPos()
    {
      return self()->mPlaylistWindowPos;
    }

    /**
      Set Size of playlist window
    */
    static
    void setPlaylistWindowSize( const QSize & v )
    {
      if (!self()->isImmutable( "PlaylistWindowSize" ))
        self()->mPlaylistWindowSize = v;
    }

    /**
      Get Size of playlist window
    */
    static
    QSize playlistWindowSize()
    {
      return self()->mPlaylistWindowSize;
    }

    /**
      Set Whether to save playlist on quit
    */
    static
    void setSavePlaylist( bool v )
    {
      if (!self()->isImmutable( "SavePlaylist" ))
        self()->mSavePlaylist = v;
    }

    /**
      Get Whether to save playlist on quit
    */
    static
    bool savePlaylist()
    {
      return self()->mSavePlaylist;
    }

    /**
      Set Whether to follow symlinks while adding items to playlist recursively
    */
    static
    void setFollowSymlinks( bool v )
    {
      if (!self()->isImmutable( "FollowSymlinks" ))
        self()->mFollowSymlinks = v;
    }

    /**
      Get Whether to follow symlinks while adding items to playlist recursively
    */
    static
    bool followSymlinks()
    {
      return self()->mFollowSymlinks;
    }

    /**
      Set Whether to display remaining track time
    */
    static
    void setTimeDisplayRemaining( bool v )
    {
      if (!self()->isImmutable( "TimeDisplayRemaining" ))
        self()->mTimeDisplayRemaining = v;
    }

    /**
      Get Whether to display remaining track time
    */
    static
    bool timeDisplayRemaining()
    {
      return self()->mTimeDisplayRemaining;
    }

    /**
      Set Whether to play track repeatedly
    */
    static
    void setRepeatTrack( bool v )
    {
      if (!self()->isImmutable( "RepeatTrack" ))
        self()->mRepeatTrack = v;
    }

    /**
      Get Whether to play track repeatedly
    */
    static
    bool repeatTrack()
    {
      return self()->mRepeatTrack;
    }

    /**
      Set Whether to play whole playlist repeatedly
    */
    static
    void setRepeatPlaylist( bool v )
    {
      if (!self()->isImmutable( "RepeatPlaylist" ))
        self()->mRepeatPlaylist = v;
    }

    /**
      Get Whether to play whole playlist repeatedly
    */
    static
    bool repeatPlaylist()
    {
      return self()->mRepeatPlaylist;
    }

    /**
      Set Whether to play tracks in random order
    */
    static
    void setRandomMode( bool v )
    {
      if (!self()->isImmutable( "RandomMode" ))
        self()->mRandomMode = v;
    }

    /**
      Get Whether to play tracks in random order
    */
    static
    bool randomMode()
    {
      return self()->mRandomMode;
    }

    /**
      Set Whether to show track metadata
    */
    static
    void setShowMetaInfo( bool v )
    {
      if (!self()->isImmutable( "ShowMetaInfo" ))
        self()->mShowMetaInfo = v;
    }

    /**
      Get Whether to show track metadata
    */
    static
    bool showMetaInfo()
    {
      return self()->mShowMetaInfo;
    }

    /**
      Set Whether to show icon in system tray
    */
    static
    void setShowTrayIcon( bool v )
    {
      if (!self()->isImmutable( "ShowTrayIcon" ))
        self()->mShowTrayIcon = v;
    }

    /**
      Get Whether to show icon in system tray
    */
    static
    bool showTrayIcon()
    {
      return self()->mShowTrayIcon;
    }

    /**
      Set Whether to show player window
    */
    static
    void setShowPlayerWindow( bool v )
    {
      if (!self()->isImmutable( "ShowPlayerWindow" ))
        self()->mShowPlayerWindow = v;
    }

    /**
      Get Whether to show player window
    */
    static
    bool showPlayerWindow()
    {
      return self()->mShowPlayerWindow;
    }

    /**
      Set Whether to show the Playlist Statusbar
    */
    static
    void setShowStatusBar( bool v )
    {
      if (!self()->isImmutable( "ShowStatusBar" ))
        self()->mShowStatusBar = v;
    }

    /**
      Get Whether to show the Playlist Statusbar
    */
    static
    bool showStatusBar()
    {
      return self()->mShowStatusBar;
    }

    /**
      Set Toggle the Welcome-page in the browser bar
    */
    static
    void setShowWelcomeTab( bool v )
    {
      if (!self()->isImmutable( "ShowWelcomeTab" ))
        self()->mShowWelcomeTab = v;
    }

    /**
      Get Toggle the Welcome-page in the browser bar
    */
    static
    bool showWelcomeTab()
    {
      return self()->mShowWelcomeTab;
    }

    /**
      Set Whether to add directories to playlist recursively
    */
    static
    void setDirectoriesRecursively( bool v )
    {
      if (!self()->isImmutable( "DirectoriesRecursively" ))
        self()->mDirectoriesRecursively = v;
    }

    /**
      Get Whether to add directories to playlist recursively
    */
    static
    bool directoriesRecursively()
    {
      return self()->mDirectoriesRecursively;
    }

    /**
      Set Delay between tracks, in milliseconds
    */
    static
    void setTrackDelayLength( int v )
    {
      if (!self()->isImmutable( "TrackDelayLength" ))
        self()->mTrackDelayLength = v;
    }

    /**
      Get Delay between tracks, in milliseconds
    */
    static
    int trackDelayLength()
    {
      return self()->mTrackDelayLength;
    }

    /**
      Set Whether to hide playlist together with player window
    */
    static
    void setHidePlaylistWindow( bool v )
    {
      if (!self()->isImmutable( "HidePlaylistWindow" ))
        self()->mHidePlaylistWindow = v;
    }

    /**
      Get Whether to hide playlist together with player window
    */
    static
    bool hidePlaylistWindow()
    {
      return self()->mHidePlaylistWindow;
    }

    /**
      Set Whether the playlist window is visible
    */
    static
    void setPlaylistWindowEnabled( bool v )
    {
      if (!self()->isImmutable( "PlaylistWindowEnabled" ))
        self()->mPlaylistWindowEnabled = v;
    }

    /**
      Get Whether the playlist window is visible
    */
    static
    bool playlistWindowEnabled()
    {
      return self()->mPlaylistWindowEnabled;
    }

    /**
      Set Number of undo levels in playlist
    */
    static
    void setUndoLevels( int v )
    {
      if (!self()->isImmutable( "UndoLevels" ))
        self()->mUndoLevels = v;
    }

    /**
      Get Number of undo levels in playlist
    */
    static
    int undoLevels()
    {
      return self()->mUndoLevels;
    }

    /**
      Set Index of current visual analyzer
    */
    static
    void setCurrentAnalyzer( int v )
    {
      if (!self()->isImmutable( "CurrentAnalyzer" ))
        self()->mCurrentAnalyzer = v;
    }

    /**
      Get Index of current visual analyzer
    */
    static
    int currentAnalyzer()
    {
      return self()->mCurrentAnalyzer;
    }

    /**
      Set Persistent audio effects
    */
    static
    void setRememberEffects( bool v )
    {
      if (!self()->isImmutable( "RememberEffects" ))
        self()->mRememberEffects = v;
    }

    /**
      Get Persistent audio effects
    */
    static
    bool rememberEffects()
    {
      return self()->mRememberEffects;
    }

    /**
      Set Playlist window splitter positions
    */
    static
    void setPlaylistWindowSplitter( const QValueList<int> & v )
    {
      if (!self()->isImmutable( "PlaylistWindowSplitter" ))
        self()->mPlaylistWindowSplitter = v;
    }

    /**
      Get Playlist window splitter positions
    */
    static
    QValueList<int> playlistWindowSplitter()
    {
      return self()->mPlaylistWindowSplitter;
    }

    /**
      Set Whether the playlist should scroll with the active playlist item
    */
    static
    void setPlaylistFollowActive( bool v )
    {
      if (!self()->isImmutable( "PlaylistFollowActive" ))
        self()->mPlaylistFollowActive = v;
    }

    /**
      Get Whether the playlist should scroll with the active playlist item
    */
    static
    bool playlistFollowActive()
    {
      return self()->mPlaylistFollowActive;
    }

    /**
      Set Whether a splash-screen should be displayed on startup
    */
    static
    void setShowSplashscreen( bool v )
    {
      if (!self()->isImmutable( "ShowSplashscreen" ))
        self()->mShowSplashscreen = v;
    }

    /**
      Get Whether a splash-screen should be displayed on startup
    */
    static
    bool showSplashscreen()
    {
      return self()->mShowSplashscreen;
    }

    /**
      Set Master volume
    */
    static
    void setMasterVolume( int v )
    {
      if (!self()->isImmutable( "MasterVolume" ))
        self()->mMasterVolume = v;
    }

    /**
      Get Master volume
    */
    static
    int masterVolume()
    {
      return self()->mMasterVolume;
    }

    /**
      Set Use soundcard hardware mixer for volume
    */
    static
    void setHardwareMixer( bool v )
    {
      if (!self()->isImmutable( "HardwareMixer" ))
        self()->mHardwareMixer = v;
    }

    /**
      Get Use soundcard hardware mixer for volume
    */
    static
    bool hardwareMixer()
    {
      return self()->mHardwareMixer;
    }

    /**
      Set Whether to crossfade between tracks
    */
    static
    void setCrossfade( bool v )
    {
      if (!self()->isImmutable( "Crossfade" ))
        self()->mCrossfade = v;
    }

    /**
      Get Whether to crossfade between tracks
    */
    static
    bool crossfade()
    {
      return self()->mCrossfade;
    }

    /**
      Set Length of crossfade, in milliseconds
    */
    static
    void setCrossfadeLength( int v )
    {
      if (!self()->isImmutable( "CrossfadeLength" ))
        self()->mCrossfadeLength = v;
    }

    /**
      Get Length of crossfade, in milliseconds
    */
    static
    int crossfadeLength()
    {
      return self()->mCrossfadeLength;
    }

    /**
      Set Sound system to use
    */
    static
    void setSoundSystem( const QString & v )
    {
      if (!self()->isImmutable( "SoundSystem" ))
        self()->mSoundSystem = v;
    }

    /**
      Get Sound system to use
    */
    static
    QString soundSystem()
    {
      return self()->mSoundSystem;
    }

    /**
      Set Sound output method to use
    */
    static
    void setSoundOutput( const QString & v )
    {
      if (!self()->isImmutable( "SoundOutput" ))
        self()->mSoundOutput = v;
    }

    /**
      Get Sound output method to use
    */
    static
    QString soundOutput()
    {
      return self()->mSoundOutput;
    }

    /**
      Set Sound output device to use
    */
    static
    void setSoundDevice( const QString & v )
    {
      if (!self()->isImmutable( "SoundDevice" ))
        self()->mSoundDevice = v;
    }

    /**
      Get Sound output device to use
    */
    static
    QString soundDevice()
    {
      return self()->mSoundDevice;
    }

    /**
      Set Don't use the autodetected audiosink sound device
    */
    static
    void setCustomSoundDevice( bool v )
    {
      if (!self()->isImmutable( "CustomSoundDevice" ))
        self()->mCustomSoundDevice = v;
    }

    /**
      Get Don't use the autodetected audiosink sound device
    */
    static
    bool customSoundDevice()
    {
      return self()->mCustomSoundDevice;
    }

    /**
      Set Read titles of shoutcast streams
    */
    static
    void setTitleStreaming( bool v )
    {
      if (!self()->isImmutable( "TitleStreaming" ))
        self()->mTitleStreaming = v;
    }

    /**
      Get Read titles of shoutcast streams
    */
    static
    bool titleStreaming()
    {
      return self()->mTitleStreaming;
    }

    /**
      Set Use On-Screen Display
    */
    static
    void setOsdEnabled( bool v )
    {
      if (!self()->isImmutable( "OsdEnabled" ))
        self()->mOsdEnabled = v;
    }

    /**
      Get Use On-Screen Display
    */
    static
    bool osdEnabled()
    {
      return self()->mOsdEnabled;
    }

    /**
      Set Font for On-Screen Display
    */
    static
    void setOsdFont( const QFont & v )
    {
      if (!self()->isImmutable( "OsdFont" ))
        self()->mOsdFont = v;
    }

    /**
      Get Font for On-Screen Display
    */
    static
    QFont osdFont()
    {
      return self()->mOsdFont;
    }

    /**
      Set Draw a shadow around the text.
    */
    static
    void setOsdDrawShadow( bool v )
    {
      if (!self()->isImmutable( "OsdDrawShadow" ))
        self()->mOsdDrawShadow = v;
    }

    /**
      Get Draw a shadow around the text.
    */
    static
    bool osdDrawShadow()
    {
      return self()->mOsdDrawShadow;
    }

    /**
      Set Whether to use custom colors for the OSD
    */
    static
    void setOsdUseCustomColors( bool v )
    {
      if (!self()->isImmutable( "OsdUseCustomColors" ))
        self()->mOsdUseCustomColors = v;
    }

    /**
      Get Whether to use custom colors for the OSD
    */
    static
    bool osdUseCustomColors()
    {
      return self()->mOsdUseCustomColors;
    }

    /**
      Set Font Color for On-Screen Display
    */
    static
    void setOsdTextColor( const QColor & v )
    {
      if (!self()->isImmutable( "OsdTextColor" ))
        self()->mOsdTextColor = v;
    }

    /**
      Get Font Color for On-Screen Display
    */
    static
    QColor osdTextColor()
    {
      return self()->mOsdTextColor;
    }

    /**
      Set Background Color for On-Screen Display
    */
    static
    void setOsdBackgroundColor( const QColor & v )
    {
      if (!self()->isImmutable( "OsdBackgroundColor" ))
        self()->mOsdBackgroundColor = v;
    }

    /**
      Get Background Color for On-Screen Display
    */
    static
    QColor osdBackgroundColor()
    {
      return self()->mOsdBackgroundColor;
    }

    /**
      Set How many milliseconds the text should be displayed
    */
    static
    void setOsdDuration( int v )
    {
      if (!self()->isImmutable( "OsdDuration" ))
        self()->mOsdDuration = v;
    }

    /**
      Get How many milliseconds the text should be displayed
    */
    static
    int osdDuration()
    {
      return self()->mOsdDuration;
    }

    /**
      Set X position offset
    */
    static
    void setOsdXOffset( int v )
    {
      if (!self()->isImmutable( "OsdXOffset" ))
        self()->mOsdXOffset = v;
    }

    /**
      Get X position offset
    */
    static
    int osdXOffset()
    {
      return self()->mOsdXOffset;
    }

    /**
      Set Y position offset
    */
    static
    void setOsdYOffset( int v )
    {
      if (!self()->isImmutable( "OsdYOffset" ))
        self()->mOsdYOffset = v;
    }

    /**
      Get Y position offset
    */
    static
    int osdYOffset()
    {
      return self()->mOsdYOffset;
    }

    /**
      Set OSD screen
    */
    static
    void setOsdScreen( int v )
    {
      if (!self()->isImmutable( "OsdScreen" ))
        self()->mOsdScreen = v;
    }

    /**
      Get OSD screen
    */
    static
    int osdScreen()
    {
      return self()->mOsdScreen;
    }

    /**
      Set Align OSD to
    */
    static
    void setOsdAlignment( int v )
    {
      if (!self()->isImmutable( "OsdAlignment" ))
        self()->mOsdAlignment = v;
    }

    /**
      Get Align OSD to
    */
    static
    int osdAlignment()
    {
      return self()->mOsdAlignment;
    }

    /**
      Set Whether to use user-defined fonts
    */
    static
    void setUseCustomFonts( bool v )
    {
      if (!self()->isImmutable( "UseCustomFonts" ))
        self()->mUseCustomFonts = v;
    }

    /**
      Get Whether to use user-defined fonts
    */
    static
    bool useCustomFonts()
    {
      return self()->mUseCustomFonts;
    }

    /**
      Set Font in playlist window
    */
    static
    void setPlaylistWindowFont( const QFont & v )
    {
      if (!self()->isImmutable( "PlaylistWindowFont" ))
        self()->mPlaylistWindowFont = v;
    }

    /**
      Get Font in playlist window
    */
    static
    QFont playlistWindowFont()
    {
      return self()->mPlaylistWindowFont;
    }

    /**
      Set Font in player window
    */
    static
    void setPlayerWidgetFont( const QFont & v )
    {
      if (!self()->isImmutable( "PlayerWidgetFont" ))
        self()->mPlayerWidgetFont = v;
    }

    /**
      Get Font in player window
    */
    static
    QFont playerWidgetFont()
    {
      return self()->mPlayerWidgetFont;
    }

    /**
      Set Font in player window title scroller
    */
    static
    void setPlayerWidgetScrollFont( const QFont & v )
    {
      if (!self()->isImmutable( "PlayerWidgetScrollFont" ))
        self()->mPlayerWidgetScrollFont = v;
    }

    /**
      Get Font in player window title scroller
    */
    static
    QFont playerWidgetScrollFont()
    {
      return self()->mPlayerWidgetScrollFont;
    }

    /**
      Set Whether to use amaroK standard colors in the playlist window
    */
    static
    void setSchemeAmarok( bool v )
    {
      if (!self()->isImmutable( "SchemeAmarok" ))
        self()->mSchemeAmarok = v;
    }

    /**
      Get Whether to use amaroK standard colors in the playlist window
    */
    static
    bool schemeAmarok()
    {
      return self()->mSchemeAmarok;
    }

    /**
      Set Whether to use global KDE colors in the playlist window
    */
    static
    void setSchemeKDE( bool v )
    {
      if (!self()->isImmutable( "SchemeKDE" ))
        self()->mSchemeKDE = v;
    }

    /**
      Get Whether to use global KDE colors in the playlist window
    */
    static
    bool schemeKDE()
    {
      return self()->mSchemeKDE;
    }

    /**
      Set Whether to use user-defined colors in the playlist window
    */
    static
    void setSchemeCustom( bool v )
    {
      if (!self()->isImmutable( "SchemeCustom" ))
        self()->mSchemeCustom = v;
    }

    /**
      Get Whether to use user-defined colors in the playlist window
    */
    static
    bool schemeCustom()
    {
      return self()->mSchemeCustom;
    }

    /**
      Set Playlist window foreground color
    */
    static
    void setPlaylistWindowFgColor( const QColor & v )
    {
      if (!self()->isImmutable( "PlaylistWindowFgColor" ))
        self()->mPlaylistWindowFgColor = v;
    }

    /**
      Get Playlist window foreground color
    */
    static
    QColor playlistWindowFgColor()
    {
      return self()->mPlaylistWindowFgColor;
    }

    /**
      Set Playlist window background color
    */
    static
    void setPlaylistWindowBgColor( const QColor & v )
    {
      if (!self()->isImmutable( "PlaylistWindowBgColor" ))
        self()->mPlaylistWindowBgColor = v;
    }

    /**
      Get Playlist window background color
    */
    static
    QColor playlistWindowBgColor()
    {
      return self()->mPlaylistWindowBgColor;
    }

    /**
      Set Resume playback of last played track on startup
    */
    static
    void setResumePlayback( bool v )
    {
      if (!self()->isImmutable( "ResumePlayback" ))
        self()->mResumePlayback = v;
    }

    /**
      Get Resume playback of last played track on startup
    */
    static
    bool resumePlayback()
    {
      return self()->mResumePlayback;
    }

    /**
      Set Track URL to resume upon startup
    */
    static
    void setResumeTrack( const QString & v )
    {
      if (!self()->isImmutable( "ResumeTrack" ))
        self()->mResumeTrack = v;
    }

    /**
      Get Track URL to resume upon startup
    */
    static
    QString resumeTrack()
    {
      return self()->mResumeTrack;
    }

    /**
      Set Time to resume at, in seconds
    */
    static
    void setResumeTime( int v )
    {
      if (!self()->isImmutable( "ResumeTime" ))
        self()->mResumeTime = v;
    }

    /**
      Get Time to resume at, in seconds
    */
    static
    int resumeTime()
    {
      return self()->mResumeTime;
    }

    static
    void writeConfig()
    {
      static_cast<KConfigSkeleton*>(self())->writeConfig();
    }
  protected:
    AmarokConfig();
    static AmarokConfig *mSelf;


    // General Options
    QString mVersion;
    QPoint mPlayerPos;
    QPoint mPlaylistWindowPos;
    QSize mPlaylistWindowSize;
    bool mSavePlaylist;
    bool mFollowSymlinks;
    bool mTimeDisplayRemaining;
    bool mRepeatTrack;
    bool mRepeatPlaylist;
    bool mRandomMode;
    bool mShowMetaInfo;
    bool mShowTrayIcon;
    bool mShowPlayerWindow;
    bool mShowStatusBar;
    bool mShowWelcomeTab;
    bool mDirectoriesRecursively;
    int mTrackDelayLength;
    bool mHidePlaylistWindow;
    bool mPlaylistWindowEnabled;
    int mUndoLevels;
    int mCurrentAnalyzer;
    bool mRememberEffects;
    QValueList<int> mPlaylistWindowSplitter;
    bool mPlaylistFollowActive;
    bool mShowSplashscreen;

    // Playback
    int mMasterVolume;
    bool mHardwareMixer;
    bool mCrossfade;
    int mCrossfadeLength;
    QString mSoundSystem;
    QString mSoundOutput;
    QString mSoundDevice;
    bool mCustomSoundDevice;
    bool mTitleStreaming;

    // OSD
    bool mOsdEnabled;
    QFont mOsdFont;
    bool mOsdDrawShadow;
    bool mOsdUseCustomColors;
    QColor mOsdTextColor;
    QColor mOsdBackgroundColor;
    int mOsdDuration;
    int mOsdXOffset;
    int mOsdYOffset;
    int mOsdScreen;
    int mOsdAlignment;

    // Fonts
    bool mUseCustomFonts;
    QFont mPlaylistWindowFont;
    QFont mPlayerWidgetFont;
    QFont mPlayerWidgetScrollFont;

    // Colors
    bool mSchemeAmarok;
    bool mSchemeKDE;
    bool mSchemeCustom;
    QColor mPlaylistWindowFgColor;
    QColor mPlaylistWindowBgColor;

    // Session
    bool mResumePlayback;
    QString mResumeTrack;
    int mResumeTime;

  private:
};

#endif
