// This file is generated by kconfig_compiler from amarok.kcfg.
// All changes you do to this file will be lost.

#include "amarokconfig.h"

#include <qdir.h>
#include <kstaticdeleter.h>

AmarokConfig *AmarokConfig::mSelf = 0;
static KStaticDeleter<AmarokConfig> staticDeleter;

AmarokConfig *AmarokConfig::self()
{
  if ( !mSelf ) {
    staticDeleter.setObject( mSelf, new AmarokConfig() );
    mSelf->readConfig();
  }

  return mSelf;
}

AmarokConfig::AmarokConfig(  )
  : KConfigSkeleton( "amarokrc" )
{
  mSelf = this;
  setCurrentGroup( "General Options" );

  KConfigSkeleton::ItemString  *itemVersion;
  itemVersion = new KConfigSkeleton::ItemString( currentGroup(), "Version", mVersion );
  addItem( itemVersion );
  KConfigSkeleton::ItemPoint  *itemPlayerPos;
  itemPlayerPos = new KConfigSkeleton::ItemPoint( currentGroup(), "Player Pos", mPlayerPos, QPoint(-1,-1) );
  addItem( itemPlayerPos, "PlayerPos" );
  KConfigSkeleton::ItemPoint  *itemPlaylistWindowPos;
  itemPlaylistWindowPos = new KConfigSkeleton::ItemPoint( currentGroup(), "Playlist Window Pos", mPlaylistWindowPos, QPoint(-1,-1) );
  addItem( itemPlaylistWindowPos, "PlaylistWindowPos" );
  KConfigSkeleton::ItemSize  *itemPlaylistWindowSize;
  itemPlaylistWindowSize = new KConfigSkeleton::ItemSize( currentGroup(), "Playlist Window Size", mPlaylistWindowSize, QSize(600,450) );
  addItem( itemPlaylistWindowSize, "PlaylistWindowSize" );
  KConfigSkeleton::ItemBool  *itemSavePlaylist;
  itemSavePlaylist = new KConfigSkeleton::ItemBool( currentGroup(), "Save Playlist", mSavePlaylist, true );
  addItem( itemSavePlaylist, "SavePlaylist" );
  KConfigSkeleton::ItemBool  *itemFollowSymlinks;
  itemFollowSymlinks = new KConfigSkeleton::ItemBool( currentGroup(), "Follow Symlinks", mFollowSymlinks, true );
  addItem( itemFollowSymlinks, "FollowSymlinks" );
  KConfigSkeleton::ItemBool  *itemTimeDisplayRemaining;
  itemTimeDisplayRemaining = new KConfigSkeleton::ItemBool( currentGroup(), "Time Display Remaining", mTimeDisplayRemaining, false );
  addItem( itemTimeDisplayRemaining, "TimeDisplayRemaining" );
  KConfigSkeleton::ItemBool  *itemRepeatTrack;
  itemRepeatTrack = new KConfigSkeleton::ItemBool( currentGroup(), "Repeat Track", mRepeatTrack, false );
  addItem( itemRepeatTrack, "RepeatTrack" );
  KConfigSkeleton::ItemBool  *itemRepeatPlaylist;
  itemRepeatPlaylist = new KConfigSkeleton::ItemBool( currentGroup(), "Repeat Playlist", mRepeatPlaylist, false );
  addItem( itemRepeatPlaylist, "RepeatPlaylist" );
  KConfigSkeleton::ItemBool  *itemRandomMode;
  itemRandomMode = new KConfigSkeleton::ItemBool( currentGroup(), "Random Mode", mRandomMode, false );
  addItem( itemRandomMode, "RandomMode" );
  KConfigSkeleton::ItemBool  *itemShowMetaInfo;
  itemShowMetaInfo = new KConfigSkeleton::ItemBool( currentGroup(), "Show Meta Info", mShowMetaInfo, true );
  addItem( itemShowMetaInfo, "ShowMetaInfo" );
  KConfigSkeleton::ItemBool  *itemShowTrayIcon;
  itemShowTrayIcon = new KConfigSkeleton::ItemBool( currentGroup(), "Show Tray Icon", mShowTrayIcon, true );
  addItem( itemShowTrayIcon, "ShowTrayIcon" );
  KConfigSkeleton::ItemBool  *itemShowPlayerWindow;
  itemShowPlayerWindow = new KConfigSkeleton::ItemBool( currentGroup(), "Show Player Window", mShowPlayerWindow, true );
  addItem( itemShowPlayerWindow, "ShowPlayerWindow" );
  KConfigSkeleton::ItemBool  *itemShowStatusBar;
  itemShowStatusBar = new KConfigSkeleton::ItemBool( currentGroup(), "Show Status Bar", mShowStatusBar, false );
  addItem( itemShowStatusBar, "ShowStatusBar" );
  KConfigSkeleton::ItemBool  *itemShowWelcomeTab;
  itemShowWelcomeTab = new KConfigSkeleton::ItemBool( currentGroup(), "Show Welcome Tab", mShowWelcomeTab, true );
  addItem( itemShowWelcomeTab, "ShowWelcomeTab" );
  KConfigSkeleton::ItemBool  *itemDirectoriesRecursively;
  itemDirectoriesRecursively = new KConfigSkeleton::ItemBool( currentGroup(), "Directories Recursively", mDirectoriesRecursively, true );
  addItem( itemDirectoriesRecursively, "DirectoriesRecursively" );
  KConfigSkeleton::ItemInt  *itemTrackDelayLength;
  itemTrackDelayLength = new KConfigSkeleton::ItemInt( currentGroup(), "Track Delay Length", mTrackDelayLength, 0 );
  addItem( itemTrackDelayLength, "TrackDelayLength" );
  KConfigSkeleton::ItemBool  *itemHidePlaylistWindow;
  itemHidePlaylistWindow = new KConfigSkeleton::ItemBool( currentGroup(), "Hide Playlist Window", mHidePlaylistWindow, true );
  addItem( itemHidePlaylistWindow, "HidePlaylistWindow" );
  KConfigSkeleton::ItemBool  *itemPlaylistWindowEnabled;
  itemPlaylistWindowEnabled = new KConfigSkeleton::ItemBool( currentGroup(), "Playlist Window Enabled", mPlaylistWindowEnabled, true );
  addItem( itemPlaylistWindowEnabled, "PlaylistWindowEnabled" );
  KConfigSkeleton::ItemInt  *itemUndoLevels;
  itemUndoLevels = new KConfigSkeleton::ItemInt( currentGroup(), "Undo Levels", mUndoLevels, 30 );
  addItem( itemUndoLevels, "UndoLevels" );
  KConfigSkeleton::ItemInt  *itemCurrentAnalyzer;
  itemCurrentAnalyzer = new KConfigSkeleton::ItemInt( currentGroup(), "Current Analyzer", mCurrentAnalyzer, -1 );
  addItem( itemCurrentAnalyzer, "CurrentAnalyzer" );
  KConfigSkeleton::ItemBool  *itemRememberEffects;
  itemRememberEffects = new KConfigSkeleton::ItemBool( currentGroup(), "Remember Effects", mRememberEffects, true );
  addItem( itemRememberEffects, "RememberEffects" );
  QValueList<int> defaultPlaylistWindowSplitter;
  defaultPlaylistWindowSplitter.append( 70 );
  defaultPlaylistWindowSplitter.append( 140 );

  KConfigSkeleton::ItemIntList  *itemPlaylistWindowSplitter;
  itemPlaylistWindowSplitter = new KConfigSkeleton::ItemIntList( currentGroup(), "Playlist Window Splitter", mPlaylistWindowSplitter, defaultPlaylistWindowSplitter );
  addItem( itemPlaylistWindowSplitter, "PlaylistWindowSplitter" );
  KConfigSkeleton::ItemBool  *itemPlaylistFollowActive;
  itemPlaylistFollowActive = new KConfigSkeleton::ItemBool( currentGroup(), "Playlist Follow Active", mPlaylistFollowActive, false );
  addItem( itemPlaylistFollowActive, "PlaylistFollowActive" );
  KConfigSkeleton::ItemBool  *itemShowSplashscreen;
  itemShowSplashscreen = new KConfigSkeleton::ItemBool( currentGroup(), "Show Splashscreen", mShowSplashscreen, true );
  addItem( itemShowSplashscreen, "ShowSplashscreen" );

  setCurrentGroup( "Playback" );

  KConfigSkeleton::ItemInt  *itemMasterVolume;
  itemMasterVolume = new KConfigSkeleton::ItemInt( currentGroup(), "Master Volume", mMasterVolume, 50 );
  itemMasterVolume->setMinValue(0);
  itemMasterVolume->setMaxValue(100);
  addItem( itemMasterVolume, "MasterVolume" );
  KConfigSkeleton::ItemBool  *itemHardwareMixer;
  itemHardwareMixer = new KConfigSkeleton::ItemBool( currentGroup(), "Hardware Mixer", mHardwareMixer, false );
  addItem( itemHardwareMixer, "HardwareMixer" );
  KConfigSkeleton::ItemBool  *itemCrossfade;
  itemCrossfade = new KConfigSkeleton::ItemBool( currentGroup(), "Crossfade", mCrossfade, true );
  addItem( itemCrossfade );
  KConfigSkeleton::ItemInt  *itemCrossfadeLength;
  itemCrossfadeLength = new KConfigSkeleton::ItemInt( currentGroup(), "Crossfade Length", mCrossfadeLength, 2200 );
  addItem( itemCrossfadeLength, "CrossfadeLength" );
  KConfigSkeleton::ItemString  *itemSoundSystem;
  itemSoundSystem = new KConfigSkeleton::ItemString( currentGroup(), "Sound System", mSoundSystem, "aRts Engine" );
  addItem( itemSoundSystem, "SoundSystem" );
  KConfigSkeleton::ItemString  *itemSoundOutput;
  itemSoundOutput = new KConfigSkeleton::ItemString( currentGroup(), "Sound Output", mSoundOutput, "Alsa" );
  addItem( itemSoundOutput, "SoundOutput" );
  KConfigSkeleton::ItemString  *itemSoundDevice;
  itemSoundDevice = new KConfigSkeleton::ItemString( currentGroup(), "Sound Device", mSoundDevice );
  addItem( itemSoundDevice, "SoundDevice" );
  KConfigSkeleton::ItemBool  *itemCustomSoundDevice;
  itemCustomSoundDevice = new KConfigSkeleton::ItemBool( currentGroup(), "Custom Sound Device", mCustomSoundDevice, false );
  addItem( itemCustomSoundDevice, "CustomSoundDevice" );
  KConfigSkeleton::ItemBool  *itemTitleStreaming;
  itemTitleStreaming = new KConfigSkeleton::ItemBool( currentGroup(), "Title Streaming", mTitleStreaming, true );
  addItem( itemTitleStreaming, "TitleStreaming" );

  setCurrentGroup( "OSD" );

  KConfigSkeleton::ItemBool  *itemOsdEnabled;
  itemOsdEnabled = new KConfigSkeleton::ItemBool( currentGroup(), "Osd Enabled", mOsdEnabled, true );
  addItem( itemOsdEnabled, "OsdEnabled" );
  KConfigSkeleton::ItemFont  *itemOsdFont;
  itemOsdFont = new KConfigSkeleton::ItemFont( currentGroup(), "Osd Font", mOsdFont, QFont("Arial",20) );
  addItem( itemOsdFont, "OsdFont" );
  KConfigSkeleton::ItemBool  *itemOsdDrawShadow;
  itemOsdDrawShadow = new KConfigSkeleton::ItemBool( currentGroup(), "Osd Draw Shadow", mOsdDrawShadow, true );
  addItem( itemOsdDrawShadow, "OsdDrawShadow" );
  KConfigSkeleton::ItemBool  *itemOsdUseCustomColors;
  itemOsdUseCustomColors = new KConfigSkeleton::ItemBool( currentGroup(), "Osd Use Custom Colors", mOsdUseCustomColors, false );
  addItem( itemOsdUseCustomColors, "OsdUseCustomColors" );
  KConfigSkeleton::ItemColor  *itemOsdTextColor;
  itemOsdTextColor = new KConfigSkeleton::ItemColor( currentGroup(), "Osd Text Color", mOsdTextColor, QColor( "#ffff00" ) );
  addItem( itemOsdTextColor, "OsdTextColor" );
  KConfigSkeleton::ItemColor  *itemOsdBackgroundColor;
  itemOsdBackgroundColor = new KConfigSkeleton::ItemColor( currentGroup(), "Osd Background Color", mOsdBackgroundColor, QColor( "#1500a0" ) );
  addItem( itemOsdBackgroundColor, "OsdBackgroundColor" );
  KConfigSkeleton::ItemInt  *itemOsdDuration;
  itemOsdDuration = new KConfigSkeleton::ItemInt( currentGroup(), "Osd Duration", mOsdDuration, 5000 );
  itemOsdDuration->setMinValue(500);
  itemOsdDuration->setMaxValue(10000);
  addItem( itemOsdDuration, "OsdDuration" );
  KConfigSkeleton::ItemInt  *itemOsdXOffset;
  itemOsdXOffset = new KConfigSkeleton::ItemInt( currentGroup(), "Osd X Offset", mOsdXOffset, 30 );
  itemOsdXOffset->setMinValue(0);
  itemOsdXOffset->setMaxValue(10000);
  addItem( itemOsdXOffset, "OsdXOffset" );
  KConfigSkeleton::ItemInt  *itemOsdYOffset;
  itemOsdYOffset = new KConfigSkeleton::ItemInt( currentGroup(), "Osd Y Offset", mOsdYOffset, 30 );
  itemOsdYOffset->setMinValue(0);
  itemOsdYOffset->setMaxValue(10000);
  addItem( itemOsdYOffset, "OsdYOffset" );
  KConfigSkeleton::ItemInt  *itemOsdScreen;
  itemOsdScreen = new KConfigSkeleton::ItemInt( currentGroup(), "Osd Screen", mOsdScreen, 0 );
  addItem( itemOsdScreen, "OsdScreen" );
  QValueList<KConfigSkeleton::ItemEnum::Choice> valuesOsdAlignment;
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = "Left";
    valuesOsdAlignment.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = "Middle";
    valuesOsdAlignment.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = "Center";
    valuesOsdAlignment.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = "Right";
    valuesOsdAlignment.append( choice );
  }
  KConfigSkeleton::ItemEnum  *itemOsdAlignment;
  itemOsdAlignment = new KConfigSkeleton::ItemEnum( currentGroup(), "Osd Alignment", mOsdAlignment, valuesOsdAlignment, EnumOsdAlignment::Center );
  addItem( itemOsdAlignment, "OsdAlignment" );

  setCurrentGroup( "Fonts" );

  KConfigSkeleton::ItemBool  *itemUseCustomFonts;
  itemUseCustomFonts = new KConfigSkeleton::ItemBool( currentGroup(), "Use Custom Fonts", mUseCustomFonts, false );
  addItem( itemUseCustomFonts, "UseCustomFonts" );
  KConfigSkeleton::ItemFont  *itemPlaylistWindowFont;
  itemPlaylistWindowFont = new KConfigSkeleton::ItemFont( currentGroup(), "Playlist Window Font", mPlaylistWindowFont, QFont("Helvetica",9) );
  addItem( itemPlaylistWindowFont, "PlaylistWindowFont" );
  KConfigSkeleton::ItemFont  *itemPlayerWidgetFont;
  itemPlayerWidgetFont = new KConfigSkeleton::ItemFont( currentGroup(), "Player Widget Font", mPlayerWidgetFont, QFont("Helvetica",9) );
  addItem( itemPlayerWidgetFont, "PlayerWidgetFont" );
  KConfigSkeleton::ItemFont  *itemPlayerWidgetScrollFont;
  itemPlayerWidgetScrollFont = new KConfigSkeleton::ItemFont( currentGroup(), "Player Widget Scroll Font", mPlayerWidgetScrollFont, QFont("Helvetica",9) );
  addItem( itemPlayerWidgetScrollFont, "PlayerWidgetScrollFont" );

  setCurrentGroup( "Colors" );

  KConfigSkeleton::ItemBool  *itemSchemeAmarok;
  itemSchemeAmarok = new KConfigSkeleton::ItemBool( currentGroup(), "Scheme Amarok", mSchemeAmarok, false );
  addItem( itemSchemeAmarok, "SchemeAmarok" );
  KConfigSkeleton::ItemBool  *itemSchemeKDE;
  itemSchemeKDE = new KConfigSkeleton::ItemBool( currentGroup(), "Scheme KDE", mSchemeKDE, true );
  addItem( itemSchemeKDE, "SchemeKDE" );
  KConfigSkeleton::ItemBool  *itemSchemeCustom;
  itemSchemeCustom = new KConfigSkeleton::ItemBool( currentGroup(), "Scheme Custom", mSchemeCustom, false );
  addItem( itemSchemeCustom, "SchemeCustom" );
  KConfigSkeleton::ItemColor  *itemPlaylistWindowFgColor;
  itemPlaylistWindowFgColor = new KConfigSkeleton::ItemColor( currentGroup(), "Playlist Window Fg Color", mPlaylistWindowFgColor, QColor( "#80a0ff" ) );
  addItem( itemPlaylistWindowFgColor, "PlaylistWindowFgColor" );
  KConfigSkeleton::ItemColor  *itemPlaylistWindowBgColor;
  itemPlaylistWindowBgColor = new KConfigSkeleton::ItemColor( currentGroup(), "Playlist Window Bg Color", mPlaylistWindowBgColor, QColor( "#000000" ) );
  addItem( itemPlaylistWindowBgColor, "PlaylistWindowBgColor" );

  setCurrentGroup( "Session" );

  KConfigSkeleton::ItemBool  *itemResumePlayback;
  itemResumePlayback = new KConfigSkeleton::ItemBool( currentGroup(), "Resume Playback", mResumePlayback, false );
  addItem( itemResumePlayback, "ResumePlayback" );
  KConfigSkeleton::ItemPath  *itemResumeTrack;
  itemResumeTrack = new KConfigSkeleton::ItemPath( currentGroup(), "Resume Track", mResumeTrack );
  addItem( itemResumeTrack, "ResumeTrack" );
  KConfigSkeleton::ItemInt  *itemResumeTime;
  itemResumeTime = new KConfigSkeleton::ItemInt( currentGroup(), "Resume Time", mResumeTime, -1 );
  addItem( itemResumeTime, "ResumeTime" );
}

AmarokConfig::~AmarokConfig()
{
  if ( mSelf == this )
    staticDeleter.setObject( mSelf, 0, false );
}

