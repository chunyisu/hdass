<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.3.6">
  <compounddef id="classPluginManager" kind="class" prot="public">
    <compoundname>PluginManager</compoundname>
    <includes refid="pluginmanager_8h" local="no">pluginmanager.h</includes>
    <innerclass refid="structPluginManager_1_1StoreItem">PluginManager::StoreItem</innerclass>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classPluginManager_1PluginManagere0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KTrader::OfferList</type>
        <definition>KTrader::OfferList PluginManager::query</definition>
        <argsstring>(const QString &amp;constraint=QString::null)</argsstring>
        <name>query</name>
        <param>
          <type>const QString &amp;</type>
          <declname>constraint</declname>
          <defval>QString::null</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>It will return a list of services that match your specifications. The only required parameter is the service type. This is something like &apos;text/plain&apos; or &apos;text/html&apos;. The constraint parameter is used to limit the possible choices returned based on the constraints you give it.</para><para>The <computeroutput>constraint</computeroutput>  language is rather full. The most common keywords are AND, OR, NOT, IN, and EXIST, all used in an almost spoken-word form. An example is: <programlisting><codeline><highlight class="normal"><sp/>(Type<sp/>==<sp/>&apos;Service&apos;)<sp/>and<sp/>((&apos;KParts/ReadOnlyPart&apos;<sp/>in<sp/>ServiceTypes)<sp/>or<sp/>(exist<sp/>Exec))</highlight></codeline>
</programlisting></para><para>The keys used in the query (Type, ServiceType, Exec) are all fields found in the .desktop files.</para><para><parameterlist kind="param"><parametername>constraint</parametername>
<parameterdescription>
<para>A constraint to limit the choices returned, QString::null to get all services of the given <computeroutput>servicetype</computeroutput>  </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>A list of services that satisfy the query </para></simplesect>
<simplesect kind="see"><para><ulink url="http://developer.kde.org/documentation/library/kdeqt/tradersyntax.html">http://developer.kde.org/documentation/library/kdeqt/tradersyntax.html</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/kde_application/hdass08/src/pluginmanager.h" line="57" bodystart="37" bodyend="47"/>
        <references refid="classPluginManager_1PluginManagers0" compoundref="pluginmanager_8h" startline="32">FrameworkVersion</references>
        <referencedby refid="classPluginManager_1PluginManagere1" compoundref="pluginmanager_8cpp" startline="51" endline="61">createFromQuery</referencedby>
      </memberdef>
      <memberdef kind="function" id="classPluginManager_1PluginManagere1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPlugin" kindref="compound">Plugin</ref> *</type>
        <definition>Plugin * PluginManager::createFromQuery</definition>
        <argsstring>(const QString &amp;constraint=QString::null)</argsstring>
        <name>createFromQuery</name>
        <param>
          <type>const QString &amp;</type>
          <declname>constraint</declname>
          <defval>QString::null</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load and instantiate plugin from query <parameterlist kind="param"><parametername>constraint</parametername>
<parameterdescription>
<para>A constraint to limit the choices returned, QString::null to get all services of the given <computeroutput>servicetype</computeroutput>  </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>Pointer to <ref refid="classPlugin" kindref="compound">Plugin</ref>, or NULL if error </para></simplesect>
<simplesect kind="see"><para><ulink url="http://developer.kde.org/documentation/library/kdeqt/tradersyntax.html">http://developer.kde.org/documentation/library/kdeqt/tradersyntax.html</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/kde_application/hdass08/src/pluginmanager.h" line="66" bodystart="51" bodyend="61"/>
        <references refid="classPluginManager_1PluginManagere2" compoundref="pluginmanager_8cpp" startline="65" endline="97">createFromService</references>
        <references refid="classPluginManager_1PluginManagere0" compoundref="pluginmanager_8cpp" startline="37" endline="47">query</references>
      </memberdef>
      <memberdef kind="function" id="classPluginManager_1PluginManagere2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPlugin" kindref="compound">Plugin</ref> *</type>
        <definition>Plugin * PluginManager::createFromService</definition>
        <argsstring>(const KService::Ptr service)</argsstring>
        <name>createFromService</name>
        <param>
          <type>const KService::Ptr</type>
          <declname>service</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load and instantiate plugin from service <parameterlist kind="param"><parametername>service</parametername>
<parameterdescription>
<para>Pointer to KService </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>Pointer to <ref refid="classPlugin" kindref="compound">Plugin</ref>, or NULL if error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/kde_application/hdass08/src/pluginmanager.h" line="73" bodystart="65" bodyend="97"/>
        <references refid="classPluginManager_1PluginManagere5" compoundref="pluginmanager_8cpp" startline="140" endline="164">dump</references>
        <references refid="structPluginManager_1_1StoreItem_1PluginManager_1_1StoreItemo1" compoundref="pluginmanager_8h" startline="97">PluginManager::StoreItem::library</references>
        <references refid="classPluginManager_1PluginManagerv0" compoundref="pluginmanager_8cpp" startline="29">m_store</references>
        <references refid="structPluginManager_1_1StoreItem_1PluginManager_1_1StoreItemo0" compoundref="pluginmanager_8h" startline="96">PluginManager::StoreItem::plugin</references>
        <references refid="structPluginManager_1_1StoreItem_1PluginManager_1_1StoreItemo2" compoundref="pluginmanager_8h" startline="98">PluginManager::StoreItem::service</references>
        <referencedby refid="classPluginManager_1PluginManagere1" compoundref="pluginmanager_8cpp" startline="51" endline="61">createFromQuery</referencedby>
      </memberdef>
      <memberdef kind="function" id="classPluginManager_1PluginManagere3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PluginManager::unload</definition>
        <argsstring>(Plugin *plugin)</argsstring>
        <name>unload</name>
        <param>
          <type><ref refid="classPlugin" kindref="compound">Plugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove library and delete plugin <parameterlist kind="param"><parametername>plugin</parametername>
<parameterdescription>
<para>Pointer to plugin </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/kde_application/hdass08/src/pluginmanager.h" line="79" bodystart="101" bodyend="116"/>
        <references refid="classPluginManager_1PluginManagerh0" compoundref="pluginmanager_8cpp" startline="172" endline="183">lookupPlugin</references>
        <references refid="classPluginManager_1PluginManagerv0" compoundref="pluginmanager_8cpp" startline="29">m_store</references>
      </memberdef>
      <memberdef kind="function" id="classPluginManager_1PluginManagere4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KService::Ptr</type>
        <definition>KService::Ptr PluginManager::getService</definition>
        <argsstring>(const Plugin *plugin)</argsstring>
        <name>getService</name>
        <param>
          <type>const <ref refid="classPlugin" kindref="compound">Plugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Look up service for loaded plugin from store <parameterlist kind="param"><parametername>pointer</parametername>
<parameterdescription>
<para>Pointer to plugin </para></parameterdescription></parameterlist>
<simplesect kind="return"><para>KService, or 0 if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/kde_application/hdass08/src/pluginmanager.h" line="86" bodystart="120" bodyend="136"/>
        <references refid="classPluginManager_1PluginManagerh0" compoundref="pluginmanager_8cpp" startline="172" endline="183">lookupPlugin</references>
        <references refid="classPluginManager_1PluginManagerv0" compoundref="pluginmanager_8cpp" startline="29">m_store</references>
      </memberdef>
      <memberdef kind="function" id="classPluginManager_1PluginManagere5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PluginManager::dump</definition>
        <argsstring>(const KService::Ptr service)</argsstring>
        <name>dump</name>
        <param>
          <type>const KService::Ptr</type>
          <declname>service</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dump properties from a service to stdout for debugging <parameterlist kind="param"><parametername>service</parametername>
<parameterdescription>
<para>Pointer to KService </para></parameterdescription></parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/kde_application/hdass08/src/pluginmanager.h" line="92" bodystart="140" bodyend="164"/>
        <referencedby refid="classPluginManager_1PluginManagere2" compoundref="pluginmanager_8cpp" startline="65" endline="97">createFromService</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classPluginManager_1PluginManagers0" prot="public" static="yes" volatile="no" mutable="no">
        <type>const int</type>
        <definition>const int PluginManager::FrameworkVersion</definition>
        <argsstring></argsstring>
        <name>FrameworkVersion</name>
        <initializer> 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bump this number whenever the plugin framework gets incompatible with older versions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/kde_application/hdass08/src/pluginmanager.h" line="32" bodystart="32" bodyend="-1"/>
        <referencedby refid="classPluginManager_1PluginManagere0" compoundref="pluginmanager_8cpp" startline="37" endline="47">query</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classPluginManager_1PluginManagerh0" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structPluginManager_1_1StoreItem" kindref="compound">StoreItem</ref> &gt;::iterator</type>
        <definition>vector&lt; PluginManager::StoreItem &gt;::iterator PluginManager::lookupPlugin</definition>
        <argsstring>(const Plugin *plugin)</argsstring>
        <name>lookupPlugin</name>
        <param>
          <type>const <ref refid="classPlugin" kindref="compound">Plugin</ref> *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/kde_application/hdass08/src/pluginmanager.h" line="101" bodystart="172" bodyend="183"/>
        <references refid="classPluginManager_1PluginManagerv0" compoundref="pluginmanager_8cpp" startline="29">m_store</references>
        <referencedby refid="classPluginManager_1PluginManagere4" compoundref="pluginmanager_8cpp" startline="120" endline="136">getService</referencedby>
        <referencedby refid="classPluginManager_1PluginManagere3" compoundref="pluginmanager_8cpp" startline="101" endline="116">unload</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classPluginManager_1PluginManagerv0" prot="private" static="yes" volatile="no" mutable="no">
        <type>vector&lt; <ref refid="structPluginManager_1_1StoreItem" kindref="compound">StoreItem</ref> &gt;</type>
        <definition>vector&lt; PluginManager::StoreItem &gt; PluginManager::m_store</definition>
        <argsstring></argsstring>
        <name>m_store</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/kde_application/hdass08/src/pluginmanager.h" line="104" bodystart="29" bodyend="-1"/>
        <referencedby refid="classPluginManager_1PluginManagere2" compoundref="pluginmanager_8cpp" startline="65" endline="97">createFromService</referencedby>
        <referencedby refid="classPluginManager_1PluginManagere4" compoundref="pluginmanager_8cpp" startline="120" endline="136">getService</referencedby>
        <referencedby refid="classPluginManager_1PluginManagerh0" compoundref="pluginmanager_8cpp" startline="172" endline="183">lookupPlugin</referencedby>
        <referencedby refid="classPluginManager_1PluginManagere3" compoundref="pluginmanager_8cpp" startline="101" endline="116">unload</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/root/kde_application/hdass08/src/pluginmanager.h" line="29" bodystart="28" bodyend="105"/>
    <listofallmembers>
      <member refid="classPluginManager_1PluginManagere1" prot="public" virt="non-virtual"><scope>PluginManager</scope><name>createFromQuery</name></member>
      <member refid="classPluginManager_1PluginManagere2" prot="public" virt="non-virtual"><scope>PluginManager</scope><name>createFromService</name></member>
      <member refid="classPluginManager_1PluginManagere5" prot="public" virt="non-virtual"><scope>PluginManager</scope><name>dump</name></member>
      <member refid="classPluginManager_1PluginManagers0" prot="public" virt="non-virtual"><scope>PluginManager</scope><name>FrameworkVersion</name></member>
      <member refid="classPluginManager_1PluginManagere4" prot="public" virt="non-virtual"><scope>PluginManager</scope><name>getService</name></member>
      <member refid="classPluginManager_1PluginManagerh0" prot="private" virt="non-virtual"><scope>PluginManager</scope><name>lookupPlugin</name></member>
      <member refid="classPluginManager_1PluginManagerv0" prot="private" virt="non-virtual"><scope>PluginManager</scope><name>m_store</name></member>
      <member refid="classPluginManager_1PluginManagere0" prot="public" virt="non-virtual"><scope>PluginManager</scope><name>query</name></member>
      <member refid="classPluginManager_1PluginManagere3" prot="public" virt="non-virtual"><scope>PluginManager</scope><name>unload</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
